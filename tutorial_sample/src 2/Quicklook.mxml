<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ilog="http://www.ilog.com/2007/ilog/flex" xmlns:local="*"
	paddingTop="4" paddingLeft="4" paddingRight="4" paddingBottom="4"
	title="Quicklook" 
	width="1000" height="750"
	applicationComplete="completeHandler()">

	<mx:Script>

		<![CDATA[
		
		import mx.collections.ArrayCollection;
		import ilog.utils.TimeUnit;
		import mx.events.ItemClickEvent;
		import ilog.calendar.CalendarEvent;

		[Bindable] public var items:ArrayCollection;
		
		[Bindable] private var currentItem:CalendarItemModel;
		
		private var dao:CalendarItemDAO;
		
		private var calendarModes:Array = [
        	{label: "Day", mode: Calendar.DAY_MODE},
        	{label: "Work", mode: Calendar.WORK_WEEK_MODE},
        	{label: "Week", mode: Calendar.WEEK_MODE},
        	{label: "Month", mode: Calendar.MONTH_MODE} ];        

		private function completeHandler():void
		{
			toggleModeBar.dataProvider = calendarModes; 
			openDatabase();
		}

		private function openDatabase():void
		{
			var file:File = File.userDirectory.resolvePath("Quicklook.db");
			var isNewDB:Boolean = !file.exists;
			var sqlConnection:SQLConnection = new SQLConnection();
			sqlConnection.open(file);
			dao = new CalendarItemDAO(sqlConnection);
			if (isNewDB) dao.createTable();
			items = dao.findAll();
		}
		
		private function keyboardEventHandler(event:KeyboardEvent):void
		{
	        switch(event.keyCode) 
	        {
				case Keyboard.DELETE:
            		items.removeItemAt(items.getItemIndex(currentItem));
            		dao.deleteItem(currentItem);
            		currentItem = null;
            		break;
	        	
				case Keyboard.ENTER:
		            createItemFromSelection(cal.timeRangeSelection);
		            cal.timeRangeSelection = null;
		            summary.setFocus();
		            break;
		            
				default:
            		var s:String = String.fromCharCode(event.charCode);                       
            		var e:Date = cal.calendar.addUnits(cal.endDisplayedDate, TimeUnit.DAY, 1);
              
		            if (cal.timeRangeSelection != null && 
		               (cal.timeRangeSelection[0] > e || 
		                cal.startDisplayedDate > cal.timeRangeSelection[1])) {
						return;        
		            }             
		            
		            if ((s >= "a" && s <= "z") || (s >= "A" && s <= "A")) 
		            {
						createItemFromSelection(cal.timeRangeSelection, s);              
		              	summary.setFocus();
		              	if (cal.timeRangeSelection != null) 
		              	{
		                	summary.text = s;
		              	}
		              	summary.setSelection(1,1);
		              	cal.timeRangeSelection = null;
		            }
        	}
		}

		private function createItemFromSelection(selection:Array, summary:String=""):void 
		{
			var selection:Array = cal.timeRangeSelection;
			if (selection != null) 
			{
				createItem(selection[0] as Date, selection[1] as Date, summary);
			} 
      	}

		private function createItem(startTime:Date, endTime:Date, summary:String=""):void 
		{
			var newItem:CalendarItemModel = new CalendarItemModel();
			newItem.startTime = startTime;
			newItem.endTime = endTime;
			newItem.summary = summary;
			items.addItem(newItem);
			cal.selectedItems = [newItem];
			currentItem = newItem;
			dao.insert(newItem);
      	}

		private function itemSelectionChange(event:CalendarEvent):void 
		{
	        if (cal.selectedItems.length == 1) 
	        {
				currentItem = cal.selectedItems[0];
				callLater(selectSummary)
	        }
	        else
	        {
				currentItem = null;
				description.htmlText = "";
	        }
      	}
		
		private function itemEditEnd(event:CalendarEvent):void 
		{
			callLater(updateItem, [currentItem]);
		}

		private function updateItem(item:CalendarItemModel):void
		{
			dao.update(item);
		}

		private function selectSummary():void
		{
			summary.setFocus();
			summary.setSelection(0, summary.text.length);
		}

		private function summaryChange():void
		{
			currentItem.summary = summary.text;
	        dao.update(currentItem);
		}

		private function descriptionChange():void
		{
			currentItem.description = description.htmlText;
	        dao.update(currentItem);
		}
		
		private function toggleCalendarMode(event:ItemClickEvent):void 
		{
        	if (cal.date == null) 
        	{          
        		cal.date = cal.endDate;              
        	}
        	cal.mode = event.item.mode;
      	}

		private function startDateChange():void
		{
			var temp:Date = startDate.selectedDate;
			temp.hours = startTime.selectedItem.hours;
			temp.minutes = startTime.selectedItem.minutes;

			// If the new start time is after the initial end time, we assume that the user wants
			// to move the meeting keeping its original duration as opposed to simply changing the
			// start time.  
			if (temp > currentItem.endTime)
			{
				var diff:Number = currentItem.endTime.time - currentItem.startTime.time;
				currentItem.startTime = temp;
				currentItem.endTime = new Date(temp.time + diff); 
			}
			else
			{
				currentItem.startTime = temp;
			}
	        dao.update(currentItem);
	        cal.executeBindings();
		}
		
		private function endDateChange():void
		{
			var temp:Date = endDate.selectedDate;
			temp.hours = endTime.selectedItem.hours;
			temp.minutes = endTime.selectedItem.minutes;
			
			// If the new end time is before the initial start time, we assume that the user wants
			// to move the meeting keeping its original duration as opposed to simply changing the
			// end time.  
			if (temp < currentItem.startTime)
			{
				var diff:Number = currentItem.endTime.time - currentItem.startTime.time;
				currentItem.endTime = temp;
				currentItem.startTime = new Date(temp.time - diff); 
			}
			else
			{
				currentItem.endTime = temp;
			}	
	        dao.update(currentItem);
	        cal.executeBindings();
		}
		
		]]>
	</mx:Script>
	
	<mx:HDividedBox width="100%" height="100%">
		
		<ilog:Calendar width="100%" height="100%" id="cal" mode="week" doubleClickEnabled="true" 
			keyUp="keyboardEventHandler(event)" dataProvider="{items}"
			itemEditEnd="itemEditEnd(event)"
	      	change="itemSelectionChange(event)">
		</ilog:Calendar>
		
		<mx:VBox width="258" minWidth="258" height="100%">
			<mx:ToggleButtonBar id="toggleModeBar" itemClick="toggleCalendarMode(event)" width="100%"/>            
			<mx:DateChooser id="dc" yearNavigationEnabled="true" change="cal.date = dc.selectedDate" width="100%"/>
			<mx:Form width="100%" paddingLeft="0">
				<mx:FormItem label="Start:" direction="horizontal">
					<mx:DateField id="startDate" selectedDate="{currentItem.startTime}" change="startDateChange()" enabled="{currentItem != null}"/>
					<local:TimeComboBox id="startTime" date="{currentItem.startTime}" change="startDateChange()" enabled="{currentItem != null}"/>
				</mx:FormItem>
				<mx:FormItem label="End:" direction="horizontal">
					<mx:DateField id="endDate" selectedDate="{currentItem.endTime}" change="endDateChange()" enabled="{currentItem != null}"/>
					<local:TimeComboBox id="endTime" date="{currentItem.endTime}" change="endDateChange()" enabled="{currentItem != null}"/>
				</mx:FormItem>
			</mx:Form>
			<mx:Label text="Summary:"/>
			<mx:TextArea id="summary" width="100%" height="50" text="{currentItem.summary}" change="summaryChange()" enabled="{currentItem != null}"/>			
			<mx:Label text="Description:"/>
			<mx:RichTextEditor id="description" title="Description" width="100%" height="100%" htmlText="{currentItem.description}" change="descriptionChange()" enabled="{currentItem != null}"
				headerHeight="0" borderThicknessBottom="0" borderThicknessTop="0" borderThicknessLeft="0" borderThicknessRight="0" dropShadowEnabled="false" borderAlpha="0"/>			
		</mx:VBox>

	</mx:HDividedBox>
	
</mx:WindowedApplication>
