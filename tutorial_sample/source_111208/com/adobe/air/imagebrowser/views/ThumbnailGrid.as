package com.adobe.air.imagebrowser.views {		import com.adobe.air.imagebrowser.controls.IImageCell;	import com.adobe.air.imagebrowser.controls.ImageOverlay;	import com.adobe.air.imagebrowser.data.IImageCellFactory;	import com.adobe.air.imagebrowser.data.ImageData;	import com.adobe.images.PNGEncoder;	import com.gskinner.motion.GTween;	import com.gskinner.utils.Rnd;	import com.gskinner.utils.CallLater;		import fl.motion.easing.Sine;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.filters.DropShadowFilter;	import flash.geom.ColorTransform;	import flash.geom.Point;	import flash.utils.ByteArray;		public class ThumbnailGrid extends Sprite {				protected const THUMBS_START_Z:Number = 1000;		protected const SLIDE_WIDTH:Number = 500;		protected const SLIDE_HEIGHT:Number = 500;		protected const SLIDE_GAP:Number = 25;		protected var rows:uint;		protected var cols:uint;		protected var slides:Array;		protected var slideTweens:Array;		protected var slideCanvas:Sprite;		protected var centerCanvas:Sprite;		protected var slideIndex:int;		protected var canvasWidth:Number;		protected var canvasHeight:Number;		protected var numSlides:uint;		protected var zoomedOut:Boolean = true;		protected var _itemRenderer:IImageCell;		protected var imageOverlay:ImageOverlay;		protected var iImageCellFactory:IImageCellFactory;				protected var showAllX:Number;		protected var showAllY:Number;				protected var xOffset:Number;		protected var yOffset:Number; 				//Tween to handel non 3D posistining		protected var canvasTween:GTween;		//Tween to handel 3D posistining		protected var canvasTween2:GTween;				public function ThumbnailGrid() {			super();			configUI();		}				protected function configUI():void {			centerCanvas = new Sprite();			addChild(centerCanvas);						slideCanvas = new Sprite();			centerCanvas.addChild(slideCanvas);						canvasTween = new GTween(slideCanvas,0.5,null,{ease:Sine.easeInOut});			canvasTween2 = new GTween(slideCanvas,0.5,null,{ease:Sine.easeInOut});			canvasTween2.addEventListener(Event.COMPLETE,handleSwoopComplete, false, 0, true);			canvasTween.addEventListener(Event.COMPLETE,handlePosistionComplete, false, 0, true);			canvasTween2.addEventListener(Event.CHANGE,handleSwoopChange, false, 0, true);						imageOverlay = new ImageOverlay();			imageOverlay.addEventListener('save', onImageSave, false, 0, true);			imageOverlay.addEventListener(TextEvent.LINK, onTagClick, false, 0, true);			imageOverlay.addEventListener(Event.CLOSE, onImageClose, false, 0, true);		}				protected function onTagClick(p_event:TextEvent):void {			dispatchEvent(p_event);		}				protected function onImageSave(p_event:Event):void {			var file:File = new File();			file.addEventListener(Event.SELECT, onSaveSelect, false, 0, true);						var slide:SlideData = (slides[slideIndex] as SlideData);			var name:String = slide.imageData.title == ''?'Photo':slide.imageData.title;						file.url = File.desktopDirectory.url + '/' + name + '.png';			file.browseForSave('Save image');		}				protected function onSaveSelect(p_event:Event):void {			var slide:Loader = (slides[slideIndex] as SlideData).slide.imageLoader;			var bmp:BitmapData = new BitmapData(slide.content.width, slide.content.height);			bmp.draw(slide);			var imageBytes:ByteArray = PNGEncoder.encode(bmp);						var fs:FileStream = new FileStream();			fs.open(p_event.target as File, FileMode.WRITE);			fs.writeBytes(imageBytes);			fs.close();						bmp.dispose();			imageBytes.clear();			imageBytes.length = 0;		}				public function next():void {			if (slides) { gotoSlide(slideIndex+1); }		}				public function prev():void {			if (slides) { gotoSlide(slideIndex-1); }		}				protected function onImageClose(p_event:Event):void {			showAll();		}				public function showAll():void {			if (slides[slideIndex] != null) { slides[slideIndex].slide.visible = true; }			canvasTween2.setProperties({rotationX:0, rotationY:0, z:THUMBS_START_Z});			canvasTween2.duration = canvasTween.duration = 1.2;							var newX:Number = (-centerCanvas.x) - 400; 			var newY:Number = (-centerCanvas.y) - 350;			canvasTween.setProperties({x:newX,y:newY,rotation:180});							transitionSlides(true);			zoomedOut = true;			exitingZoomedOut();		}				public function get length():Number { return numSlides; }		public function get selectedIndex():Number { return slideIndex; }				public function setSize(p_w:Number, p_h:Number):void {			centerCanvas.x = (p_w>>1);			centerCanvas.y = (p_h>>1);		}				public function set itemRenderer(item:IImageCell):void {			_itemRenderer = item;			iImageCellFactory = new IImageCellFactory(_itemRenderer);		}				public function set dataProvider(p_data:Array):void {			slideIndex = -1;						if (slides) {				while (slides.length) {					var slideData:SlideData = slides.pop() as SlideData;					var slide:IImageCell = slideData.slide;					slide.unload();					iImageCellFactory.addCell(slide);					slideCanvas.removeChild(slideData.container);				}								slideIndex = -1;			}						exitingZoomedOut();						if (p_data == null) { return; }						numSlides = p_data.length;						var rows:uint = Math.ceil(Math.sqrt(numSlides));			var cols:uint = Math.ceil(numSlides/rows);						var slideD:Number = Math.max(SLIDE_WIDTH, SLIDE_HEIGHT);			var delta:Number = slideD - Math.min(SLIDE_WIDTH, SLIDE_HEIGHT);						canvasWidth = cols*slideD+(cols-1)*SLIDE_GAP;			canvasHeight = rows*slideD+(rows-1)*SLIDE_GAP;						xOffset = width - canvasWidth>>1			yOffset = height - canvasHeight>>1;						var arr1:Array=[];			for (var i:int=(numSlides-rows*cols); i<numSlides; i++) {				arr1.push(i);			}						var arr2:Array=[];			while (arr1.length > 0) {				arr2.push(arr1.splice(Rnd.integer(arr1.length), 1)[0]);			}						slides = [];			for (i=0; i<arr2.length; i++) {				var frame:int = Math.max(0,arr2[i]+1);				if (frame <= 0) { continue; }								var row:uint = i%cols;				var col:uint = i/cols>>0;				var rot:Number = (row%2 == 0) ? (col%2==0 ? 0 : 90) : (col%2==0 ? 270 : 180);				var imageData:ImageData = p_data[i] as ImageData;				if (imageData == null) { continue; }								var thumb:IImageCell = iImageCellFactory.getCell();				thumb.width = SLIDE_WIDTH;				thumb.height = SLIDE_HEIGHT;				thumb.imageData = imageData;				thumb.load(imageData.largeImageURL);								var slideContainer:Sprite = new Sprite();				slideContainer.addEventListener(MouseEvent.CLICK, handleBmpClick, false, 0, true);								slideContainer.addChild(thumb as DisplayObject);				thumb.visible = true;								var x1:Number = (col*slideD+(col+1)*SLIDE_GAP - canvasWidth/2) + xOffset;				var y1:Number = (row*slideD+(row+1)*SLIDE_GAP - canvasHeight/2) + yOffset;				var z1:Number = Rnd.integer(1000); 								slideContainer.x = x1 + (col%2==0 ? 0 : slideD);				slideContainer.y = y1 + (row%2==0 ? 0 : slideD);				slideContainer.z = z1;								slideContainer.rotation = rot;				var tween:GTween = new GTween(slideContainer,0.5,null,{ease:Sine.easeInOut});				var id:SlideData = new SlideData(frame, row, col, slideContainer.rotationX, slideContainer.rotationY, rot, x1+slideD/2, y1+slideD/2, z1, thumb, slideContainer, tween, imageData);				slides.push(id);			}						// z sort:			slides.sortOn("z", Array.NUMERIC);			for (i=0; i<slides.length; i++) {				slideCanvas.addChildAt(slides[i].container, 0);			}						slides.sortOn("index", Array.NUMERIC);						slideCanvas.z = THUMBS_START_Z;						slideCanvas.rotation = 180;			slideCanvas.x = -(stage.stageWidth>>1);			slideCanvas.y = -(stage.stageHeight>>1);						showAllX = slideCanvas.x;			showAllY = slideCanvas.y;						showAll();		}				public function gotoSlide(index:int):void {			index = Math.min(numSlides-1,Math.max(0,index));			if (slideIndex == index && !zoomedOut) { return; }			if (slideIndex != -1) {				var slide:SlideData = slides[slideIndex] as SlideData;				if (slide == null) { return; }								slide.slide.rollOverEnabled = true;				slide.slide.visible = true;			}						var slideObj:SlideData;						if (slideIndex > -1) {				slideObj = slides[slideIndex] as SlideData;				slideObj.container.filters = [];				slideObj.slide.removeEventListener(Event.COMPLETE, onZoomedImageLoad);			}						slideIndex = index;						slideObj = slides[slideIndex] as SlideData;			if (slideObj == null) { return; }						slideObj.slide.rollOverEnabled = false;						//Set the end posistion for the tween.			canvasTween.proxy.rotation = -slideObj.rotation;			canvasTween.proxy.x = (slideObj.col%2==0 ? (slideObj.row%2==0 ? -slideObj.x : slideObj.y) : (slideObj.row%2==0 ? -slideObj.y : slideObj.x));			canvasTween.proxy.y = (slideObj.col%2==0 ? (slideObj.row%2==0 ? -slideObj.y : -slideObj.x) : (slideObj.row%2==0 ? slideObj.x : slideObj.y));						//Rotate the canvas back into the 3d space			canvasTween2.proxy.rotationX = Rnd.sign()*Rnd.float(5, 12);			canvasTween2.proxy.rotationY = Rnd.sign()*Rnd.float(5, 12);						canvasTween2.proxy.z = 250;			canvasTween2.data = slideObj;						var d:Number = Math.sqrt(Math.pow(slideCanvas.x-canvasTween.proxy.x,2)+Math.pow(slideCanvas.y-canvasTween.proxy.y, 2));			var rot:Number = Math.abs(slideCanvas.rotation-canvasTween.proxy.rotation);			if (rot > 180) { rot -= 180; }			canvasTween.duration = 1.2+d/4000+rot/500;						if (zoomedOut) {				canvasTween2.duration = canvasTween.duration;				canvasTween2.setProperties({z:0, rotationX:0, rotationY:0});				transitionSlides(true);				canvasTween2.data = null;				zoomedOut = false;			} else {				canvasTween2.duration = canvasTween.duration/2;				transitionSlides(false);			}						exitingZoomedOut();						dispatchEvent(new Event(Event.CHANGE));		}				protected function handlePosistionComplete(p_event:Event):void {			if (zoomedOut) { return; }						var slideObj:SlideData = slides[slideIndex] as SlideData;			if (slideObj == null || slideObj.container == null) { return; }						slideObj.container.filters = [new DropShadowFilter(14, 45, 0x0, .9, 8, 8)];						imageOverlay.imageData = slideObj.imageData;						var pt:Point = slideObj.slide.localToGlobal(new Point(0, 0));						imageOverlay.x = pt.x + (slideObj.slide.width - imageOverlay.width>>1);			imageOverlay.y = pt.y + (slideObj.slide.height - imageOverlay.height);						if (slideObj.slide.loaded == true) {				imageOverlay.enabled = true;			} else {				imageOverlay.enabled = false;				slideObj.slide.addEventListener(Event.COMPLETE, onZoomedImageLoad, false, 0, true);			}						addChild(imageOverlay); //Always on top.		}				protected function onZoomedImageLoad(p_event:Event):void {			imageOverlay.enabled = true;		}				protected function handleSwoopComplete(evt:Event):void {			if (canvasTween2.data == null && !zoomedOut && slides[slideIndex]) {				slides[slideIndex].slide.visible = true;				return;			}						if(!zoomedOut){ canvasTween2.setProperties({z:0, rotationX:0, rotationY:0}); }						exitingZoomedOut();			canvasTween2.data = null;			transitionSlides(true);		}				protected function transitionSlides(dir:Boolean):void {			for (var i:uint = 0; i < slides.length; i++) {				var slide:SlideData = slides[i] as SlideData;								var props:Object = {};								if (slideIndex != i) {					props.z = dir?slide.z*.25:slide.z;									} else {					props.z = dir?0:slide.z;					slideCanvas.setChildIndex(slide.container, slideCanvas.numChildren-1);				}								props.rotationX = dir?0:slide.rotationX;				props.rotationY = dir?0:slide.rotationY;								slide.tween.setProperties(props);				slide.tween.duration = canvasTween2.duration;			}		}				protected function handleSwoopChange(evt:Event):void {			var off:Number = Math.sin((slideCanvas.rotation-45)/180*Math.PI)*(slideCanvas.rotationX+slideCanvas.rotationY)*1.2;			var mult:Number = off/200;			slideCanvas.transform.colorTransform = new ColorTransform(1+mult,1+mult,1+mult,1,off,off,off,0);		}				protected function handleZoomClick(evt:MouseEvent):void {			showAll();		}				protected function exitingZoomedOut():void {			if (contains(imageOverlay)) {				removeChild(imageOverlay);			}		}				protected function handleBmpClick(evt:MouseEvent):void {			for (var i:uint = 0; i < slides.length; i++) {				var slide:SlideData = slides[i] as SlideData;				if (slide.container.contains(evt.target as DisplayObject)) {					gotoSlide(i);					break;				}			}		}	}}import flash.display.Bitmap;import flash.display.BitmapData;import com.adobe.air.imagebrowser.controls.Thumb;import flash.display.Sprite;import com.gskinner.motion.GTween;import com.adobe.air.imagebrowser.controls.IImageCell;import com.adobe.air.imagebrowser.data.ImageData;class SlideData {		public function SlideData(p_index:uint, row:Number, col:Number, rotationX:Number, rotationY:Number, rotation:Number, x:Number, y:Number, z:Number, slide:IImageCell, container:Sprite, tween:GTween, imageData:ImageData) {		this.index = p_index;		this.row = row;		this.col = col;		this.rotationX = rotationX;		this.rotationY = rotationY;		this.rotation = rotation;		this.x = x;		this.y = y;		this.z = z;		this.slide = slide;		this.container = container;		this.tween = tween;		this.imageData = imageData;	}		public var index:uint;	public var row:Number;	public var col:Number;	public var rotationX:Number;	public var rotationY:Number;	public var rotation:Number;	public var x:Number;	public var y:Number;	public var z:Number;	public var slide:IImageCell;	public var container:Sprite;	public var tween:GTween;	public var imageData:ImageData;}