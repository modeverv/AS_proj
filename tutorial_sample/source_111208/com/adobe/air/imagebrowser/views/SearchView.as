package com.adobe.air.imagebrowser.views {		import com.adobe.air.imagebrowser.controls.TagCloud;	import com.adobe.air.imagebrowser.controls.ToolTip;	import com.adobe.air.imagebrowser.data.ImageListData;	import com.adobe.air.imagebrowser.events.ImageEvent;	import com.adobe.air.imagebrowser.events.TagEvent;	import com.adobe.air.imagebrowser.service.ImageDelegate;	import com.gskinner.filesystem.Preferences;		import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.ui.Keyboard;		public class SearchView extends Sprite {		// constants:		public static const DEFAULT_SEARCH_TEXT:String = "Search term";				// private properties:		// public properties:		public var searchFld:TextField;		public var labelTxt:TextField;		public var searchBtn:SimpleButton;		public var closeBtn:SimpleButton;		public var tagCloud:TagCloud;		public var searchBackground:MovieClip;		public var prevBtn:SimpleButton;		public var nextBtn:SimpleButton;				protected var imageList:ImageListData;				// constructor:		public function SearchView() {			super();			visible = false;						enabled = false;						searchBtn.addEventListener(MouseEvent.CLICK, handleSearchClick, false, 0, true);			closeBtn.addEventListener(MouseEvent.CLICK,handleCloseClick, false, 0, true);			searchFld.addEventListener(KeyboardEvent.KEY_DOWN,handleFldKey, false, 0, true);			searchFld.addEventListener(MouseEvent.CLICK,handleFldClick, false, 0, true);			searchFld.addEventListener(Event.CHANGE, handleFldChange, false, 0, true);			tagCloud.addEventListener(TagEvent.HIGHLIGHT_ACTIVE, handleActiveTag, false, 0, true);			prevBtn.addEventListener(MouseEvent.CLICK, handlePrevClick, false, 0, true);			nextBtn.addEventListener(MouseEvent.CLICK, handleNextClick, false, 0, true);						ToolTip.register(prevBtn, 'Previous page');			ToolTip.register(nextBtn, 'Next page');						searchTerm = null;			if (Preferences.getPref('searchTerm') != null) {				searchFld.text = Preferences.getPref('searchTerm');				setSearchEnabled(true);			} else {				setSearchEnabled(false);			}						enableNext = false;			enablePrevious = false;						focus();			ImageDelegate.addEventListener(ImageEvent.LOAD_END, onImagesLoad);						labelTxt.embedFonts = true;			searchFld.embedFonts = true;						tabEnabled = false;			tabChildren = false;						ToolTip.register(closeBtn, 'Close');		}				public function set enabled(p_value:Boolean):void {			searchFld.mouseEnabled = p_value;			setSearchEnabled(p_value);			tagCloud.mouseChildren = p_value;			tagCloud.mouseEnabled = p_value;						if (stage && p_value) {				stage.focus = searchFld;				searchFld.setSelection(0, searchFld.length);			}		}				public function setSearchEnabled(p_enabled:Boolean):void {			searchBtn.alpha = p_enabled?1:.5;			searchBtn.mouseEnabled = p_enabled;						if (p_enabled) {				searchFld.addEventListener(KeyboardEvent.KEY_DOWN, handleFldKey, false, 0, true);			} else {				searchFld.removeEventListener(KeyboardEvent.KEY_DOWN, handleFldKey);			}		}				protected function onImagesLoad(p_event:ImageEvent):void {			imageList = p_event.imageListData;						enablePrevious = imageList && imageList.page > 1;			enableNext = imageList && imageList.page != imageList.pages;						if (imageList && imageList.total > 0) {				var start:Number = imageList.perpage * (imageList.page - 1);				var pageCount:Number =  Math.min(imageList.total, start+imageList.perpage);				labelTxt.text = 'Showing images ' +  (start+1) + ' - ' + pageCount +  ' of ' + imageList.total;			} else {				labelTxt.text = 'Showing images 0 of 0';			}		}				protected function handleFldChange(p_event:Event):void {			setSearchEnabled((searchFld.text == "" || searchFld.text == DEFAULT_SEARCH_TEXT) ? false : true);		}				protected function handleActiveTag(p_event:TagEvent):void {			searchTerm = 'tag:' + (p_event.firstTag != null?p_event.firstTag:'');		}			// public getter/setters:		public function get searchTerm():String {			return (searchFld.text == DEFAULT_SEARCH_TEXT) ? "" : searchFld.text.toLowerCase();		}				public function set searchTerm(value:String):void {			searchFld.text = (value==null) ? DEFAULT_SEARCH_TEXT : value;			if (value != null) {				runSearch();			}		}				public function set tagData(value:Array):void {			tagCloud.data = value;		}		public function highlight(p_tags:Array):void {			tagCloud.highlight(p_tags);		}				override public function set height(value:Number):void {			searchBackground.height = value;			tagCloud.height = value - 30;		}		override public function get height():Number {			return searchBackground.height;		}				public function set enablePrevious(value:Boolean):void {			prevBtn.alpha = value?1:.2;			prevBtn.mouseEnabled = value;		}		public function set enableNext(value:Boolean):void {			nextBtn.alpha = value?1:.2;			nextBtn.mouseEnabled = value;		}			// protected methods:		protected function runSearch(p_page:Number = 1):void {			setSearchEnabled(false);						enableNext = false;			enablePrevious = false;			ImageDelegate.search(searchTerm, p_page, 25);						Preferences.setPref('searchTerm', searchTerm);		}				protected function handleSearchClick(evt:Event):void {			runSearch();		}				protected function handleCloseClick(evt:Event):void {			searchTerm = null;			searchFld.text = DEFAULT_SEARCH_TEXT;			tagCloud.data = null;			dispatchEvent(new Event(Event.CLOSE));		}				protected function handleFldKey(evt:KeyboardEvent):void {			if (evt.keyCode == Keyboard.ENTER) {				runSearch();			}		}				protected function focus():void {			searchFld.setSelection(0,1000);		}				protected function handleFldClick(evt:MouseEvent):void {			if (searchFld.text == DEFAULT_SEARCH_TEXT) {				focus();			}		}				protected function handlePrevClick(evt:MouseEvent):void {			runSearch(imageList.page - 1);		}				protected function handleNextClick(evt:MouseEvent):void {			runSearch(imageList.page + 1);		}	}}