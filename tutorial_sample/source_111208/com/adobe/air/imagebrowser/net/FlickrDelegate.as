package com.adobe.air.imagebrowser.net {	import com.adobe.air.imagebrowser.data.ImageData;	import com.adobe.air.imagebrowser.data.ImageListData;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.events.IOErrorEvent;		public class FlickrDelegate extends EventDispatcher {		public static var licenses:Object;	// constants:	// private properties:		protected var _inLoad:Boolean=false;		protected var loader:URLLoader;		protected var completeHandler:Function;		protected var _data:Object;		protected var _imageListData:ImageListData; 		// public properties:		public static var apiKey:String = "9c904e712ea345e3aa8601de675b461b"; // Please obtain your own Flickr API key @ http://www.flickr.com/services/api/			// constructor:		public function FlickrDelegate() {			super();			loader = new URLLoader();		}			// public getter/setters:		public function get data():Object { return _data; }		public function get imageListData():ImageListData { return _imageListData; }			// public methods:		public function search(p_searchTerm:String, p_page:Number = 1, p_numberOfResults:uint=100):void {			close();						// assemble the search request:			var url:String = "http://api.flickr.com/services/rest/?method=flickr.photos.search";			url += "&api_key="+apiKey;			var index:uint = p_searchTerm.indexOf(":");			var modifier:String = (index == -1) ? null : p_searchTerm.substr(0,index);			if (modifier == "title") {				url += "&machine_tags=*:title=%22"+p_searchTerm.substr(index+1)+"%22";			} else if (modifier == "tags" || modifier == "tag") {				url += "&tags="+escape(p_searchTerm.substr(index+1));				url += "&tag_mode=all";			} else if (modifier == "owner") {				url += "&flickr:user=%22"+p_searchTerm.substr(index+1)+"%22";			} else {				url += "&text="+p_searchTerm;			}						url += "&sort="+"date-posted-desc"; // date-posted-desc, interestingness-desc, relevance			url += "&safe_search="+"3"; // 1-safe, 3-not			url += "&content_type="+"1"; // photos only, use 4 to include screenshots			url += "&extras="+"license,owner_name,tags"; // license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags			url += "&per_page="+p_numberOfResults;			url += "&page="+p_page;			load(url,parseSearchData);		}				public function getSizes(p_imageID:String):void {			// assemble the search request:			var url:String = "http://api.flickr.com/services/rest/?method=flickr.photos.getSizes";			url += "&api_key="+apiKey;			url += "&photo_id="+p_imageID;						load(url,parseSizesData);		}				public function getLicensesInfo():void {			// assemble the search request:			var url:String = "http://api.flickr.com/services/rest/?method=flickr.photos.licenses.getInfo";			url += "&api_key="+apiKey;			load(url,parseLicenseData);		}				public function close():void {			try { loader.close(); } catch (e:*) {}			loader.removeEventListener(Event.COMPLETE,bounceEvent);			loader.removeEventListener(ProgressEvent.PROGRESS,bounceEvent);			_data = null;		}			// private methods:		private function load(p_url:String, p_completeHandler:Function=null):void {			completeHandler = p_completeHandler;			var req:URLRequest = new URLRequest(p_url);			if (loader) {				try {					loader.close();				} catch (p_e:*) { }			}						loader.addEventListener(Event.COMPLETE,handleComplete);			loader.addEventListener(ProgressEvent.PROGRESS,bounceEvent);			loader.addEventListener(IOErrorEvent.IO_ERROR,onIOError);			loader.dataFormat = URLLoaderDataFormat.TEXT;			loader.load(req);		}				private function onIOError(p_event:IOErrorEvent):void { }				private function handleComplete(evt:Event):void {			if (completeHandler != null) { completeHandler(); }			completeHandler = null;			dispatchEvent(evt);		}			private function bounceEvent(evt:Event):void {			dispatchEvent(evt);		}				private function parseSearchData():void {			var xml:XML;			try {				xml = new XML(loader.data);			} catch (p_e:*) { xml = null; }			if (xml == null || xml.@stat == 'fail') { return; }						_imageListData = new ImageListData();			_imageListData.page = Number(xml.photos[0].@page);			_imageListData.perpage = Number(xml.photos[0].@perpage);			_imageListData.pages = Number(xml.photos[0].@pages);			_imageListData.total = Number(xml.photos[0].@total);						var arr:Array = [];						for each (var photo:Object in xml..photo) {				var imgData:ImageData = new ImageData();				imgData.thumbnailImageURL = "http://farm"+photo.@farm+".static.flickr.com/"+photo.@server+"/"+photo.@id+"_"+photo.@secret+"_t.jpg"; // t will give 100x100, m is 240x240				imgData.largeImageURL = "http://farm"+photo.@farm+".static.flickr.com/"+photo.@server+"/"+photo.@id+"_"+photo.@secret+".jpg";				imgData.mediumImageURL = "http://farm"+photo.@farm+".static.flickr.com/"+photo.@server+"/"+photo.@id+"_"+photo.@secret+"_m.jpg";				imgData.pageURL = "http://www.flickr.com/photos/"+photo.@owner+"/"+photo.@id;				imgData.ownerURL = "http://www.flickr.com/people/"+photo.@owner+"/";				imgData.tags = photo.@tags.split(" ");				if (licenses && licenses[photo.@license]) {					imgData.license = licenses[photo.@license].name;					imgData.licenseURL = licenses[photo.@license].url;				} else {					imgData.license = photo.@license;				}				imgData.id = photo.@id;				imgData.title = photo.@title;				imgData.ownerName = photo.@ownername;				arr.push(imgData);			}						_imageListData.images = arr;			_data = arr;		}				private function parseLicenseData():void {			var xml:XML = new XML(loader.data);			var hash:Object = {};			for each (var license in xml..license) {				var obj:Object = {};				var name:String = license.@name;				if (name.lastIndexOf(" License") == name.length-(" License").length) {					name = name.substr(0,name.lastIndexOf(" License"));				}				obj.name = name;				obj.url = license.@url;				hash[license.@id] = obj;			}			_data = hash;		}				private function parseSizesData():void {			var xml:XML = new XML(loader.data);			var hash:Object = {};			for each (var size in xml..size) {				var obj:Object = {};				obj.width = parseInt(size.@width);				obj.height = parseInt(size.@height);				obj.url = size.@source;				obj.pageURL = size.@url;				obj.label = size.@label;				hash[obj.label.toLowerCase()] = obj;			}			_data = hash;		}	}}