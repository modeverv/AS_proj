package com.adobe.air.imagebrowser.net {	import com.adobe.air.imagebrowser.controls.Distractor;	import com.gskinner.motion.GTween;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;	import flash.geom.Rectangle;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.utils.ByteArray;	public class BaseImageLoader extends Sprite {	// constants:	// private properties:		protected var loader:Loader;		protected var urlLoader:URLLoader;		protected var _data:ByteArray;		protected var _progressBarDirection:String="down";		protected var progressRect:Rectangle;		protected var loaderRect:Rectangle;		protected var _url:String;		public var distractor:Distractor;			// public properties:		// on stage:		public var loaderAvatar:Sprite;		public var progress:Sprite;			// constructor:		public function BaseImageLoader() {			super();			if (progress) { progressRect = progress.getBounds(this); }						loader = new Loader();			loader.visible = false;			loaderRect = loaderAvatar.getBounds(this);			addChildAt(loader,getChildIndex(loaderAvatar));			removeChild(loaderAvatar);			loaderAvatar = null;			urlLoader = new URLLoader();			urlLoader.dataFormat = URLLoaderDataFormat.BINARY;			reset();		}			// public getter/setters:		public function get progressBarDirection():String {			return _progressBarDirection;		}		public function set progressBarDirection(value:String):void {			_progressBarDirection = value;		}				public function get url():String {			return _url;		}		public function set url(value:String):void {			_url = value;		}				public function get paddingTop():Number { return (loaderRect.y-progressRect.y); }		public function get paddingBottom():Number { return (progressRect.y+progressRect.height-loaderRect.y-loaderRect.height); }		public function get paddingRight():Number { return (progressRect.x+progressRect.width-loaderRect.x-loaderRect.width); }		public function get paddingLeft():Number { return (loaderRect.x-progressRect.x); }				public function get data():ByteArray {			return _data;		}		public function set data(value:ByteArray):void {			_data = value;		}				public function get bitmapData():BitmapData {			return (loader.content as Bitmap == null) ? null : (loader.content as Bitmap).bitmapData;		}			// public methods:		public function load(p_url:String=null):void {			if (p_url) { _url = p_url; }			if (_url == null) { return; }			var url:String = _url;			reset();			_url = url;			distractor.show();						urlLoader.addEventListener(IOErrorEvent.IO_ERROR, handleError);			urlLoader.addEventListener(ProgressEvent.PROGRESS,handleProgress);			urlLoader.addEventListener(Event.COMPLETE,handleDataComplete);			urlLoader.load(new URLRequest(_url));		}				public function reset():void {			_url = null;			_data = null;			progress.scaleX = progress.alpha = 0;			loader.visible = false;						distractor.hide();						urlLoader.removeEventListener(ProgressEvent.PROGRESS,handleProgress);			urlLoader.removeEventListener(Event.COMPLETE,handleDataComplete);			urlLoader.removeEventListener(IOErrorEvent.IO_ERROR, handleError);			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE,handleImageComplete);			try { urlLoader.close(); } catch (e:*) {}			try { loader.unload(); } catch (e:*) {}			try { loader.close(); } catch (e:*) {}		}			// private methods:		protected function updateProgress(value:Number):void {			var dir:String = _progressBarDirection;			progress.width =  progressRect.width * ((dir == "left" || dir == "right" || dir == "horizontal") ? value : 1);			progress.height = progressRect.height * ((dir == "up" || dir == "down" || dir == "vertical") ? value : 1);			progress.x = progressRect.x + ((dir == "left") ? progressRect.width-progress.width : (dir == "horizontal") ? (progressRect.width-progress.width)/2 : 0);			progress.y = progressRect.y + ((dir == "up") ? progressRect.height-progress.height : (dir == "vertical") ? (progressRect.height-progress.height)/2 : 0);			progress.alpha = value;		}				protected function handleError(p_event:Event):void {			// trace('Error Supressed');		}				protected function handleProgress(evt:ProgressEvent):void {			var percentLoaded:Number = (evt.bytesTotal > 0) ? evt.bytesLoaded/evt.bytesTotal : 0;			updateProgress(percentLoaded);			dispatchEvent(evt);		}				protected function handleDataComplete(evt:Event):void {			_data = urlLoader.data as ByteArray;			updateProgress(1);			distractor.hide();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE,handleImageComplete);			loader.loadBytes(_data);		}				protected function handleImageComplete(evt:Event):void {			showImage();			dispatchEvent(evt);		}				protected function showImage():void {			updateSize();			loader.alpha = 0;			loader.visible = true;			new GTween(loader, .6, {alpha:1});		}				protected function updateSize():void {			var scale:Number = Math.min( loaderRect.width / loader.content.width , loaderRect.height / loader.content.height );			loader.scaleX = loader.scaleY = scale;			loader.width = Math.min(loaderRect.width,Math.round(loader.width));			loader.height = Math.min(loaderRect.height,Math.round(loader.height));			loader.x = ((loaderRect.width-loader.width)>>1)+loaderRect.x;			loader.y = ((loaderRect.height-loader.height)>>1)+loaderRect.y;		}	}}