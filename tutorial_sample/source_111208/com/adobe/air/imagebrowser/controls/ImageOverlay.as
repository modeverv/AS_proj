package com.adobe.air.imagebrowser.controls {		import com.adobe.air.imagebrowser.data.ImageData;	import com.adobe.air.imagebrowser.controls.TagCloud;	import com.adobe.air.imagebrowser.events.TagEvent;	import com.chewtinfoil.utils.StringUtils;		import flash.display.InteractiveObject;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.text.AntiAliasType;	import flash.text.StyleSheet;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;		public class ImageOverlay extends MovieClip {				// Constants:		// Public Properties:		// Protected Properties:		protected var _imageData:ImageData;				// UI Elements:		public var saveBtn:SimpleButton;		public var closeBtn:SimpleButton;		public var ownerFld:TextField;		public var ownerLbl:TextField;		public var titleFld:TextField;		public var bg:Sprite;		public var stroke:Sprite;		public var tagCloud:TagCloud;				// Initialization:		public function ImageOverlay() {			configUI();		}		// Public Methods:		public function set imageData(p_data:ImageData):void {			_imageData = p_data;			draw();		}				override public function set enabled(value:Boolean):void {			super.enabled = value;			saveBtn.alpha = value?1:.7;			saveBtn.mouseEnabled = value;		}				// Protected Methods:		protected function draw():void {			if (_imageData != null) {				ToolTip.register(ownerFld, 'Show ' + _imageData.ownerName + '\'s Flickr page');				ToolTip.register(titleFld, 'Show original photo');								ownerFld.htmlText = '<a href="event:' + _imageData.ownerURL + '">' + _imageData.ownerName + '</a>';				titleFld.htmlText = '<a href="event:' +_imageData.pageURL + '">' + StringUtils.truncate(_imageData.title, 35) + '</a>';								ownerLbl.x = titleFld.x + titleFld.width + 5;				ownerFld.x = ownerLbl.x + ownerLbl.width + 5;								saveBtn.x = ownerFld.width + ownerFld.x + 35;								//Need to re-create the close button everytime we re-draw, to fix an issue with the states not setting correctly after a click.				if (closeBtn) {					removeChild(closeBtn);					closeBtn = new SimpleButton();					closeBtn.upState = new closeBtnUpSkin();					closeBtn.overState = new closeBtnOverSkin();					closeBtn.downState = new closeBtnOverSkin();					closeBtn.hitTestState = new closeBtnOverSkin();					ToolTip.register(closeBtn, 'Close');					closeBtn.addEventListener(MouseEvent.CLICK, onCloseClick, false, 0, true);					addChild(closeBtn);				}								closeBtn.x = saveBtn.width + saveBtn.x + 5;				closeBtn.y = saveBtn.y;								tagCloud.width = closeBtn.x + closeBtn.width + 5;				tagCloud.x = 5;								addChild(tagCloud);				tagCloud.y = closeBtn.height + closeBtn.y - 5;				tagCloud.data = formatTagCloud(_imageData.tags);				tagCloud.height = tagCloud.tagsHeight+15;								stroke.width = bg.width = closeBtn.x + closeBtn.width + 10;				stroke.height = bg.height = tagCloud.y + tagCloud.height + 5;				stroke.width += 1;								bg.x = stroke.x = 0;				bg.y = stroke.y = 0;			}		}				override public function get height():Number { return stroke.height; }		override public function get width():Number { return stroke.width; }				protected function formatTagCloud(p_tags:Array):Array {			var l:uint = p_tags.length;			var newTags:Array = [];			for (var i:uint=0;i<l;i++) {				newTags.push({word:p_tags[i], count:1});			}			return newTags;		}				protected function formatTags(p_tags:Array):String {			var l:uint = p_tags.length;			var newTags:Array = [];			for (var i:uint=0;i<l;i++) {				newTags.push('<a href="event:' + p_tags[i] + '">' + p_tags[i] + '</a>');			}			return newTags.join(', ');		}				// Private Methods:		protected function onSaveClick(p_event:MouseEvent):void {			dispatchEvent(new Event('save'));		}				protected function onCloseClick(p_event:MouseEvent):void {			closeBtn.enabled = false;			dispatchEvent(new Event(Event.CLOSE));		}				protected function showExternal(p_event:MouseEvent):void {			var link:String = StringUtils.between(p_event.target.htmlText, 'event:', '"');			navigateToURL(new URLRequest(link));		}				protected function focusItem(p_event:MouseEvent):void {			stage.focus = p_event.target as InteractiveObject;		}				protected function onTagsChange(p_event:TagEvent):void {			dispatchEvent(p_event);		}				protected function configUI():void {			ToolTip.register(saveBtn, 'Save image...');						tagCloud.minFontSize = 10;			tagCloud.maxFontSize = 10;			tagCloud.verticleGap = 4;						tagCloud.addEventListener(TagEvent.HIGHLIGHT_ACTIVE, onTagsChange, false, 0, true);						ownerFld.autoSize = TextFieldAutoSize.LEFT;			titleFld.autoSize = TextFieldAutoSize.LEFT;						ownerFld.embedFonts = true;			titleFld.embedFonts = true;						ownerFld.addEventListener(MouseEvent.CLICK, showExternal, false, 0, false);			titleFld.addEventListener(MouseEvent.CLICK, showExternal, false, 0, false);						saveBtn.addEventListener(MouseEvent.CLICK, onSaveClick, false, 0, true);		}	}}