package com.adobe.air.imagebrowser.controls {		import com.adobe.air.imagebrowser.data.ImageData;	import com.adobe.air.imagebrowser.net.BaseImageLoader;		import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;		public class Thumb extends BaseImageLoader implements IImageCell {	// constants:	// private properties:		protected var _selected:Boolean=false;		protected var _imageData:ImageData;		protected var _enabled:Boolean;		protected var _x:Number;		protected var _y:Number;		protected var _loaded:Boolean = false;		protected var _rollOverEnabled:Boolean = true;			// public properties:		public var position:int = -1;				// on stage:		public var highlight:Sprite;		public var blackBG:Sprite;		public var bg:Sprite;			// constructor:		public function Thumb() {			super();			highlight.visible = false;			addEventListener(MouseEvent.ROLL_OVER, handleRollOver, false, 0, true);			addEventListener(MouseEvent.ROLL_OUT, handleRollOut, false, 0, true);			addEventListener(MouseEvent.CLICK, onThumbClick, false, 0, true);						if (progressRect) {				progressRect.x += 13;				progressRect.width = 100;				progressRect.y += 13;				progressRect.height = 100;			}						loaderRect.x += 13;			loaderRect.y += 13;			loaderRect.width = loaderRect.height = 100;		}				public function getInstance():IImageCell {			return new Thumb();		}			// public getter / setters:		public function set rollOverEnabled(value:Boolean):void {			_rollOverEnabled = value;		}			public function get imageLoader():Loader { return loader; }				public function get loaded():Boolean { return _loaded; }				public function get selected():Boolean {			return _selected;		}		public function set selected(value:Boolean):void {			highlight.visible = _selected = value;		}				public function get imageData():ImageData {			return _imageData;		}		public function set imageData(value:ImageData):void {			reset();			_imageData = value;			url = (_imageData == null) ? null : _imageData.thumbnailImageURL;					}				public function get enabled():Boolean {			return _enabled;		}		public function set enabled(value:Boolean):void {			mouseEnabled = _enabled = value;		}				override public function set url(value:String):void {			super.url = value;		}				override public function get x():Number {			return _x;		}				override public function set x(value:Number):void {			_x = value;			super.x = Math.round(value);		}			override public function get y():Number {			return _y;		}				override public function set y(value:Number):void {			_y = value;			super.y = Math.round(value);		}			// public methods:		public function unload():void {			reset();		}			override public function reset():void {			selected = false;			enabled = false;						distractor.alpha = .6; 			blackBG.alpha = .7;						super.reset();		}				override public function load(p_url:String = null):void {			super.load(p_url);		}			// private methods:		protected function onThumbClick(p_event:MouseEvent):void {			if (p_event.target != this) {				dispatchEvent(p_event);			}		}				override protected function showImage():void {			enabled = true;			super.showImage();						_loaded = true;			blackBG.alpha = 1;						dispatchEvent(new Event(Event.COMPLETE));		}				private function handleRollOver(evt:MouseEvent):void {			parent.addChild(this);			highlight.visible = true && _rollOverEnabled;		}				private function handleRollOut(evt:MouseEvent):void {			highlight.visible = _selected;		}	}}