package com.adobe.air.imagebrowser.controls  {	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;		import com.gskinner.controls.TextEngineLabel;		public class Tag extends MovieClip {				// Constants:		public static const COLOR:uint = 0x999999; // Default		public static const ACTIVE_COLOR:uint = 0xFF0000 // Clicked.  In next search		public static const SELECTED_COLOR:uint = 0x66DDFF; // In current search		public static const HIGHLIGHTED_COLOR:uint = 0xFFFF00; // Images are rolled over		public static const HOVER_COLOR:uint = 0xFFFFFF;						// Public Properties:		public var size:Number;		public var selected:Boolean = false;		public var label:String = "Tag";				// Private Properties:		protected var _highlighted:Boolean = false;		protected var _active:Boolean = false;		protected var hover:Boolean = false;		protected var _height:Number;		protected var _width:Number;		protected var _maxHeight:Number;		// UI Elements:		public var textField:TextField;		protected var textEngineLabel:TextEngineLabel;				// Initialization:		public function Tag() {			configUI();			addEventListener(MouseEvent.ROLL_OVER, onHover, false, 0, true);			addEventListener(MouseEvent.ROLL_OUT, onHover, false, 0, true);		}		// Public Methods:		public function update(p_word:String, p_size:Number, p_maxHeight:Number):void {			label = p_word;			size = p_size;			_maxHeight = p_maxHeight;			draw();		}				override public function get height():Number { return _height; }				override public function get width():Number { return _width; }				public function get active():Boolean { return _active; }		public function set active(p_active:Boolean):void {			_active = p_active;			draw();		}				public function get highlighted():Boolean { return _highlighted; }		public function set highlighted(p_value:Boolean):void {			_highlighted = p_value;			draw();		}				// Protected Methods:		protected function draw():void {			var maxTextFormat:TextFormat = new TextFormat('Gill Sans', _maxHeight);						var color:uint = hover ? HOVER_COLOR : highlighted ? HIGHLIGHTED_COLOR : selected ? SELECTED_COLOR : active ? ACTIVE_COLOR : COLOR;			textField.embedFonts = true;			textField.text = ' ' + label + ' ';						if (contains(textField)) {				removeChild(textField);			}						textEngineLabel.size = size;			textEngineLabel.font = '_sans';			textEngineLabel.text = label;			textEngineLabel.color = color;						textEngineLabel.drawNow();						textEngineLabel.y = _maxHeight - textEngineLabel.height;						addChild(textEngineLabel);			_width = textEngineLabel.width;			_height = textEngineLabel.height;			textField.setTextFormat(new TextFormat('Gill Sans', size, color), 1, textField.text.length-1);			textField.setTextFormat(maxTextFormat, 0, 1);			textField.width = textField.textWidth;			textField.height = textField.height + 8;		}				// Private Methods:		protected function configUI():void {			textEngineLabel =  new TextEngineLabel();			mouseChildren = false;			buttonMode = useHandCursor = true;		}				protected function onHover(p_event:MouseEvent):void {			hover = (p_event.type == MouseEvent.ROLL_OVER);			draw();		}	}	}