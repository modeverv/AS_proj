/*** MovieClipWrapper by gskinner.com. Nov 4, 2008* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2008 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package com.gskinner.ui {		import flash.display.FrameLabel;	import flash.display.MovieClip;		public class MovieClipWrapper extends DisplayObjectWrapper {				protected var actionArray:Array;				public function MovieClipWrapper(p_content:*=null, p_watchSize:Boolean=true) {			actionArray = [];			super(p_content, p_watchSize);		}				override public function set content(p_content:*):void {			super.content = p_content;			parseLabels();		}				protected function parseLabels():void {			if (content == null || (content is MovieClip) == false) { return; }			var lbls:Array = (content as MovieClip).currentLabels;			if (lbls == null) { return; }						while (lbls.length) {				var frame:FrameLabel = lbls.pop() as FrameLabel;				labelToAction(frame);			}		}				protected function labelToAction(p_label:FrameLabel):void {			if (p_label.name.match('action:') == false) { return; }			var action:String = afterFirst(p_label.name, ':');						var frame:int = -1;						if (action.indexOf('(') > -1) {				var frameNum:String = between(action, '(', ')');				frame = frameNum.length > 0?parseInt(frameNum):-1;				action = beforeFirst(action, '(');			}						actionArray[p_label.frame-1] = {action:action, frame:frame};						content['addFrameScript'](p_label.frame-1, onFrame);		}				protected function between(p_string:String, p_start:String, p_end:String):String {			var str:String = '';			if (p_string == null) { return str; }			var startIdx:int = p_string.indexOf(p_start);			if (startIdx != -1) {				startIdx += p_start.length; 				var endIdx:int = p_string.indexOf(p_end, startIdx);				if (endIdx != -1) { str = p_string.substr(startIdx, endIdx-startIdx); }			}			return str;		}				protected function onFrame():void {			var currFrame:int = (content as MovieClip).currentFrame;			var frame:Object = actionArray[currFrame-1]; 						var clip:MovieClip = (content as MovieClip);			switch (frame.action) {				case 'stop':					clip.stop(); break;				case 'play':					clip.play(); break;				case 'gotoAndStop':					clip.gotoAndStop(frame.frame); break;				case 'gotoAndPlay':					clip.gotoAndPlay(frame.frame); break;				case 'nextFrame':					clip.nextFrame(); break;				case 'prevFrame':					clip.prevFrame(); break;			}		}				//Utility Methods		protected function beforeFirst(p_string:String, p_char:String):String {			if (p_string == null) { return ''; }			var idx:int = p_string.indexOf(p_char);        	if (idx == -1) { return ''; }        	return p_string.substr(0, idx);		}				protected function afterFirst(p_string:String, p_char:String):String {			if (p_string == null) { return ''; }			var idx:int = p_string.indexOf(p_char);        	if (idx == -1) { return ''; }        	idx += p_char.length;        	return p_string.substr(idx);		}			}}