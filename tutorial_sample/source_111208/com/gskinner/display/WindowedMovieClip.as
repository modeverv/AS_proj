/*** WindowedMovieClip by gskinner.com. Nov 4, 2008* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2008 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package com.gskinner.display {		import flash.display.MovieClip;	import flash.display.NativeWindow;	import flash.events.Event;	import flash.events.NativeWindowBoundsEvent;	public class WindowedMovieClip extends MovieClip {				protected var nativeWindow:NativeWindow;		protected var background:MovieClip;		protected var _backgroundColor:uint;		protected var _backgroundAlpha:Number;				public function WindowedMovieClip() {			super();			if (stage) {				init();			} else {				addEventListener(Event.ADDED_TO_STAGE, init);			}		}				public function set backgroundColor(p_color:uint):void {			_backgroundColor = p_color;			draw();		}				public function set backgroundAlpha(p_color:Number):void {			_backgroundAlpha = p_color;			draw();		}				public function close():void {			if (nativeWindow.closed == false) {				onClosing();				nativeWindow.close();			}		}				public function maximize():void {			nativeWindow.maximize();		}				protected function draw():void {			background.graphics.clear();			background.graphics.beginFill(_backgroundColor, _backgroundAlpha);			background.graphics.drawRect(0,0,stage.stageWidth,stage.stageWidth);			background.graphics.endFill();		}				protected function init(event:Event = null):void {			removeEventListener(Event.ADDED_TO_STAGE, init);						background = new MovieClip();			background.x = 0;			background.y = 0;			addChild(background);						nativeWindow = stage.nativeWindow;			nativeWindow.addEventListener(NativeWindowBoundsEvent.RESIZE, onNativeWindowResize);		}				protected function onNativeWindowResize(p_event:NativeWindowBoundsEvent):void {			onResize();		}				protected function onClosing():void { }				protected function onResize():void {			background.width - stage.stageWidth;			background.height - stage.stageHeight;			draw();		}	}}