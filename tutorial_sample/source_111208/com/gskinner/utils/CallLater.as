/*** CallLater by gskinner.com. Nov 4, 2008* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2008 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package com.gskinner.utils {		import flash.display.Sprite;	import flash.events.Event;	import flash.utils.Dictionary;		public class CallLater extends Sprite {		// Constants:		// Public Properties:		// Private Properties:		protected static var _instance:CallLater;				protected var callLaterHash:Dictionary;			// Initialization:		public function CallLater() {			callLaterHash = new Dictionary();		}			// Public Methods:		public static function call(p_function:Function, p_frameDelay:uint = 1, p_properties:Array = null):void {			getInstance().call(p_function, p_frameDelay, p_properties);		}				public function call(p_function:Function, p_frameDelay:uint, p_properties:Array):void {			callLaterHash[p_function] = {delay:p_frameDelay, props:p_properties};			if (hasEventListener(Event.ENTER_FRAME) == false) { this.addEventListener(Event.ENTER_FRAME, onFrame); }		}				// Protected Methods:		protected function onFrame(p_event:Event):void {			var hasRun:Boolean = false;			for (var func:Object in callLaterHash) {				hasRun = true;				var obj:Object = callLaterHash[func];				if (--obj.delay == 0) {					if (obj.props == null) {						func();					} else {						func.apply(null, obj.props);					}					delete callLaterHash[func];				}			}			if (hasRun == false) { removeEventListener(Event.ENTER_FRAME, onFrame); }		}				protected static function getInstance():CallLater {			if (_instance == null) { _instance = new CallLater(); }			return _instance;		}	}	}