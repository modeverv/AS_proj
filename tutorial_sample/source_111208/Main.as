package {		import com.adobe.air.imagebrowser.controls.Distractor;	import com.adobe.air.imagebrowser.controls.Thumb;	import com.adobe.air.imagebrowser.controls.ToolTip;	import com.adobe.air.imagebrowser.data.ImageData;	import com.adobe.air.imagebrowser.events.ImageEvent;	import com.adobe.air.imagebrowser.service.ImageDelegate;	import com.adobe.air.imagebrowser.ui.MessageDisplay;	import com.adobe.air.imagebrowser.views.SearchView;	import com.adobe.air.imagebrowser.views.ThumbnailGrid;	import com.gskinner.display.WindowedMovieClip;	import com.gskinner.filesystem.Preferences;	import com.gskinner.utils.NetworkStatus;	import com.gskinner.utils.CallLater;	import com.adobe.air.imagebrowser.events.TagEvent;		import flash.display.SimpleButton;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.ui.Keyboard;	import flash.text.TextFormat;	import flash.events.NetStatusEvent;		import fl.controls.CheckBox;	public class Main extends WindowedMovieClip {		//UI		public var searchView:SearchView;		public var distractorMain:Distractor;		public var messageDisplay:MessageDisplay;		public var showThumbViewButton:SimpleButton;				public var toggleBackgroundChk:CheckBox;				protected var grid:ThumbnailGrid;		protected var index:Number = 0;				public function Main() {			super();			configUI();		}					override protected function init(event:Event = null):void {			super.init();						stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						ImageDelegate.addEventListener(ImageEvent.LOAD_START, onLoadStart);			ImageDelegate.addEventListener(ImageEvent.LOAD_END, onImagesLoad);						NetworkStatus.addEventListener(NetStatusEvent.NET_STATUS, onNetworkChange, false, 0, true);			NetworkStatus.watchUrl('http://api.flickr.com/services/rest/');						backgroundColor = 0x999999;						maximize();		}				protected function onNetworkChange(p_event:Event):void {			if (NetworkStatus.online) {				searchView.enabled = true;				showThumbViewButton.enabled = true;				messageDisplay.hide();			} else {				searchView.enabled = false;				showThumbViewButton.enabled = false;				messageDisplay.show('Flickr appears to be having technical difficulties, please try again later.', true);			}		}				override protected function onClosing():void {			Preferences.save();		}				override protected function onResize():void {			super.onResize();						searchView.height = stage.stageHeight;			searchView.x = stage.stageWidth - searchView.width;			searchView.y = 0;						distractorMain.x = stage.stageWidth - distractorMain.width>>1;			distractorMain.y = stage.stageHeight - distractorMain.width>>1;						messageDisplay.x = stage.stageWidth - messageDisplay.width>>1;			messageDisplay.y = stage.stageHeight - messageDisplay.height>>1;						showThumbViewButton.y = stage.stageHeight - showThumbViewButton.height - 10;			showThumbViewButton.x = stage.stageWidth - showThumbViewButton.width - 10;						toggleBackgroundChk.y = showThumbViewButton.y;			toggleBackgroundChk.x = searchView.x + 5;						if (grid && stage) {				grid.setSize(stage.stageWidth - searchView.width, stage.stageHeight);			}						searchView.visible = true;		}				protected function onTagClick(p_event:TagEvent):void {			searchView.searchTerm = 'tag:' + (p_event.firstTag != null?p_event.firstTag:'');		}				protected function onToggleBackgroundClick(p_event:MouseEvent):void {			backgroundAlpha = toggleBackgroundChk.selected?1:0;			Preferences.setPref('showBackground', toggleBackgroundChk.selected);		}				protected function configUI():void {			searchView = new SearchView();			searchView.addEventListener(Event.CLOSE, onClose);						showThumbViewButton = new ShowThumbViewButton();			showThumbViewButton.addEventListener(MouseEvent.CLICK, onShowThumbsClick, false, 0, true);						messageDisplay = new MessageDisplay();			messageDisplay.alpha = 0;						grid = new ThumbnailGrid();			grid.addEventListener(TagEvent.HIGHLIGHT_ACTIVE, onTagClick, false, 0, true);			grid.addEventListener(Event.CHANGE, onIndexChange, false, 0, true);			grid.itemRenderer = new Thumb();						toggleBackgroundChk.addEventListener(MouseEvent.CLICK, onToggleBackgroundClick, false, 0, true);			CallLater.call(initParamaters);						var tf:TextFormat = new TextFormat('Gill Sans', 12, 0x999999);			tf.letterSpacing = .6;			toggleBackgroundChk.setStyle('textFormat', tf);			toggleBackgroundChk.setStyle('embedFonts', true);						ToolTip.register(toggleBackgroundChk, 'Toggle Background');						addChild(grid);			addChild(searchView);			addChild(messageDisplay);			addChild(showThumbViewButton);			addChild(toggleBackgroundChk);						searchView.enabled = true; //Focuses the search field.						ToolTip.register(showThumbViewButton, 'Show All');						distractorMain.hide(false);			addChild(distractorMain);						showThumbViewButton.tabEnabled = false;			toggleBackgroundChk.tabEnabled = false;						onResize();			stage.addEventListener(KeyboardEvent.KEY_UP, onKeyboardUp);		}				protected function initParamaters():void {			//Set as * because Boolean causes a compiler Warning. Since it can't be null.			var sel:* = Preferences.getPref('showBackground');			sel = sel == null?true:sel;			toggleBackgroundChk.selected = sel;			toggleBackgroundChk.drawNow();			onToggleBackgroundClick(null);		}				protected function onShowThumbsClick(p_event:MouseEvent):void {			grid.showAll();		}				protected function onClose(event:Event):void {			close();		}				protected function onLoadStart(p_event:ImageEvent):void {			grid.dataProvider = null;			messageDisplay.hide();			distractorMain.show();		}				protected function onImagesLoad(p_event:ImageEvent):void {			distractorMain.hide();			var data:Array = p_event.images as Array;						if (data && data.length > 0) {				grid.dataProvider = data;				searchView.enabled = true;			} else {				grid.dataProvider = null;				messageDisplay.show('No images found', true);			}			formatTags(data);		}				protected function formatTags(p_images:Array):void {			if (p_images == null) { searchView.tagData = []; return; }			var tagData:Array = [];			var tagHash:Object = {};			for (var i:int=0; i < p_images.length; i++) {				var image:ImageData = p_images[i];				var tags:Array = image.tags;				for (var j:int=0; j<tags.length; j++) {					var tag:String = tags[j];					if (tagHash[tag]) { tagHash[tag].count++; }					else { tagData.push(tagHash[tag] = {word:tag, count:1}); }				}							}						searchView.tagData = tagData;		}				protected function onIndexChange(p_event:Event = null):void {			messageDisplay.show((grid.selectedIndex+1) + ' of ' + grid.length);		}				protected function onKeyboardUp(p_event:KeyboardEvent):void {			var inSearch:Boolean = false;						switch (p_event.keyCode) {				case Keyboard.LEFT:					inSearch = true;					grid.prev();					break;				case Keyboard.RIGHT:					inSearch = true;					grid.next();					break;			}		}	}}