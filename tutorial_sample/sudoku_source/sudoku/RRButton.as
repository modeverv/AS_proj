package sudoku {	import flash.display.SimpleButton;	import flash.display.GradientType;	import flash.display.Shape;	import flash.display.SpreadMethod;	import flash.display.Sprite;	import flash.filters.BevelFilter;	import flash.geom.Matrix;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.events.MouseEvent;	public class RRButton extends SimpleButton {		// Implements my own simple RoundRect labelled buttons				private var _label:String;		private var _width:Number;		private var _clickHandler:Function;				private const _height:Number = 20;						// RRButton is a button _height pixels high, with rounded ends.		public function RRButton(xpos:Number, ypos:Number, width:Number, labelStr:String, clickHandler:Function):void		{			x = xpos;			y = ypos;			_width = width;			_label = labelStr;			_clickHandler = clickHandler;						upState = makeState(0xe0e0a0, 0xf0f0f0, false);			overState = makeState(0xc0c080, 0xe0e0e0, false);			downState = makeState(0x6090ff, 0xe0e0e0, true);			hitTestState = upState;		}				override public function set enabled(value:Boolean):void		{			super.enabled = value;			if (value) {				addEventListener(MouseEvent.CLICK, _clickHandler);			} else {				removeEventListener(MouseEvent.CLICK, _clickHandler);			}		}				private function makeState(color1:uint, color2:uint, down:Boolean):Sprite {			var sprite:Sprite = new Sprite();			var bg:Shape = makeRoundRect(color1, color2, down);			var tf:TextField = makeTextField();			sprite.addChild(bg);			sprite.addChild(tf);			return sprite;		}				private function makeRoundRect(color1:uint, color2:uint, down:Boolean):Shape {			var rect:Shape = new Shape();		//	rect.graphics.lineStyle(1, 0x000000);			var colors:Array = [ color1, color2, color2, color1 ];			var alphas:Array = [1,1,1,1];			var ratios:Array = [0, 40, 215, 255 ];			var mtx:Matrix = new Matrix();			mtx.createGradientBox(_width, _height, Math.PI/2);			rect.graphics.lineStyle(0,0,1);			rect.graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, mtx, SpreadMethod.REFLECT);			rect.graphics.drawRoundRect(0, 0, _width, _height, 2*_height/4);			rect.graphics.endFill();			if (down) {				rect.filters = [new BevelFilter(1, 225)];			} else {				rect.filters = [new BevelFilter(1)];			}			return rect;		}				private function makeTextField():TextField {			var tfld:TextField = new TextField();						// set the text format			var tf = new TextFormat("Arial,Helvetica,Verdana", 10);			tf.align = TextFormatAlign.CENTER;			tfld.defaultTextFormat = tf;			tfld.text = _label;			tfld.width = _width;						// center vertically			tfld.y = (_height - tfld.textHeight) / 2;			tfld.y -= 2; // adjust for offset			tfld.height = _height - tfld.y;						return tfld;		}			}}